// LAYOUT MIXINS: FLEXBOX GRID
// ===========================
// Similar to Semantic grid, except that the mixins use flexbox instead of floats.

// Grid Container

@mixin grid-no-flexbox {
  display: block;
  margin: 0 auto;
  max-width: $grid-max-width;
  -webkit-backface-visibility: hidden;
}
@mixin grid-flexbox {
  display: flex;
  margin: 0 auto;
  max-width: $grid-max-width;
  -webkit-backface-visibility: hidden;
}
// If you have a surplus of columns at any time, use @include grid-flexbox--wrap.
@mixin grid-flexbox--wrap {
  flex-wrap: wrap;
}

// Flexbox Column Base

@mixin col-flexbox {
  position: relative;
  // Note: box-sizing: border-box; // Has been added as a global (base) mixin already.
  min-height: 1px;
  width: 100%;
  overflow: visible;
}
@mixin col-flexbox--span($col-flexbox--span) {
  width: ($col-flexbox--span / $grid-max-cols) * 100%;
}

// Note: in the Codebase flexbox grid, push/pull works by col `re-ordering`.

@mixin col-flexbox--push($col-flexbox--push) {
  order: $col-flexbox--push;
}
@mixin col-flexbox--pull($col-flexbox--pull) {
  order: -$col-flexbox--pull;
}
@mixin col-flexbox--centered($col-flexbox--centered) {
  width: ($col-flexbox--centered / $grid-max-cols) * 100%;
  margin-right: auto;
  margin-left: auto;
}

// Incomplete grid rows? No problem. Rows can be incomplete (no `.end` or `.omega` classes required).
// If you have a surplus of columns at any time, use @include grid-flexbox--wrap.
