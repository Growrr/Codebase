// LAYOUT MIXINS: FLEXBOX GRID
// ===========================
// Similar to Semantic grid, except that the mixins use flexbox instead of floats.

// Flexbox Grid Wrapper
// Include this instead of the `grid` mixin when you are deploying the flexbox grid system
// (i.e. at <= your lowest flexbox grid breakpoint).

@mixin grid--flexbox {
  display: flex;
  max-width: $grid-max-width;
  margin-right: auto;
  margin-left: auto;
  float: none;
  @include clearfix;
  -webkit-backface-visibility: hidden;
}
// If you have a surplus of columns at any time, 
// use @include grid-flexbox--wrap.
@mixin grid--flexbox--wrap {
  flex-wrap: wrap;
}

// Flexbox Column Base

@mixin col--flexbox {
  position: relative;
  min-height: 1px;
  width: 100%;
  overflow: visible;
}
@mixin col--flexbox--span($flexbox-col--span) {
  width: ($flexbox-col--span / $grid-max-cols) * 100%;
}

// Note: in the Codebase flexbox grid, push/pull works by col `re-ordering`.

@mixin col--flexbox--push($col--flexbox--push) {
  order: $col--flexbox--push;
}
@mixin col--flexbox--pull($col--flexbox--pull) {
  order: -$col--flexbox--pull;
}
@mixin col--flexbox--centered($col--flexbox--centered) {
  width: ($col--flexbox--centered / $grid-max-cols) * 100%;
  margin-right: auto;
  margin-left: auto;
}

// Incomplete grid rows? No problem. Rows can simply be incomplete (no `.end` or
// `.omega` classes required). 
// However, if you have a surplus of columns at any time, then @include grid--flexbox--wrap.
