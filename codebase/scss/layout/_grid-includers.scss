// INCLUDERS GRID
// ==============

// Grid Variables
// --------------
// Breakpoint variables were set in `base/_base-variables.scss`.

$grid-max-columns:           12;
$grid-gutter-width-tiny:     20px;
$grid-gutter-width-small:    24px;
$grid-gutter-width-medium:   36px;
$grid-gutter-width-large:    48px;
$grid-max-width:             1280px;

// Grid Container
// --------------

@mixin grid {
    margin: 0 auto;
    max-width: $grid-max-width;
    @include clearfix;
}

// Grid with Gutter between Columns
// --------------------------------
// Include `grid-gutter` in your GRID container class, not in each column.

@mixin grid-gutter {
    > * {
        padding: 0 ($grid-gutter-width-tiny / 2);
        @include breakpoint-small-up {
            padding-right: $grid-gutter-width-small / 2;
            padding-left: $grid-gutter-width-small / 2
        }
        @include breakpoint-medium-up {
            padding-right: $grid-gutter-width-medium / 2;
            padding-left: $grid-gutter-width-medium / 2
        }
        @include breakpoint-large-up {
            padding-right: $grid-gutter-width-large / 2;
            padding-left: $grid-gutter-width-large / 2
        }
    }
}

// Nested Grid
// -----------
// Only include `grid-nested` on a NESTED grid container.

@mixin grid-nested {
    margin-right: -($grid-gutter-width-tiny / 2);
    margin-left: -($grid-gutter-width-tiny / 2);
    @include breakpoint-small-up {
        margin-right: -($grid-gutter-width-small / 2);
        margin-left: -($grid-gutter-width-small / 2)
    }
    @include breakpoint-medium-up {
        margin-right: -($grid-gutter-width-medium / 2);
        margin-left: -($grid-gutter-width-medium / 2)
    }
    @include breakpoint-large-up {
        margin-right: -($grid-gutter-width-large / 2);
        margin-left: -($grid-gutter-width-large / 2)
    }
}

// Column Base
// -----------

@mixin column {
    // Relative position is required for column push/pull
    position: relative;
    // box-sizing: border-box; // Has been added as a global (base) mixin already.
    min-height: 1px;
    width: 100%;
}

@mixin column-span($column-span) {
    float: left;
    width: ($column-span / $grid-max-columns) * 100%;
}

@mixin column-offset($column-offset) {
    margin-left: ($column-offset / $grid-max-columns) * 100%;
}

@mixin column-push($column-push) {
    left: ($column-push / $grid-max-columns) * 100%;
}

@mixin column-pull($column-pull) {
    right: ($column-pull / $grid-max-columns) * 100%;
}

@mixin column-centered($column-centered) {
    width: ($column-centered / $grid-max-columns) * 100%;
    margin-right: auto;
    margin-left: auto;
}

// Incomplete rows? No problem. Rows can be incomplete (no end or omega classes required).


// Build Demo
// ----------

@mixin grid-demo {
    background: #fff;
    > * {
        background: #ddd;
        box-shadow: inset 0 0 1px #888;
    }
}

main {
    @include grid;
    @include grid-gutter;
    @include grid-demo;    
}

article {
    @include column;
    @include breakpoint-small-up {
        @include column-span(8);
        @include column-push(4);
    }
}

aside {
    @include column;
    @include breakpoint-small-up {
        @include column-span(4);
        @include column-pull(8);
    }
}

.centered {
    @include column;
    @include breakpoint-medium-up {
        @include column-centered(7);
    }
}

.nested {
    @include grid;
    @include grid-gutter;
    @include grid-nested;
    @include grid-demo;    
    div {
        @include column;
        @include column-span(4);
    }
}
