//- Layout Grid Mixins

.menu-marker-section(id="layout-grid-mixins")

  h2.docs-section Layout Grid Mixins

  p Composite responsnive grid example using flexbox column mixins:

  section.your-grid-wrapper
    .your-article-column.b--1px-solid
      | Article
      section.your-nested-grid-wrapper
        .b--1px-solid Nested
        .b--1px-solid Nested
        .b--1px-solid Nested
    .your-sidebar-column.b--1px-solid Aside
  section.your-grid-wrapper
    .your-centered-column.b--1px-solid Centered
  section.your-twelths-grid-wrapper
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
    .twelth.b--1px-solid &nbsp;
  pre.docs__code.

  p.
    The Codebase grid mixins are named similar to the Codebase classic grid classes (but prefixed either with #[code $flexbox-] or #[code $float-].

  p.
    i (The float mixins are not exemplified in these docs.)

  table.table
    thead
      tr
        th(style='width:290px') Mixin
        th Explanation
    tbody
      tr
        td
          code @mixin grid
        td.
          The container mixin. Sets the max width (from variable <code>code $grid-max-width</code> ), does centering by auto margin right and left. If you have more columns (or column width) than the grid container width, wrapping is handled by <code>flex-wrap: wrap;</code>
          br
          br
          | If a grid container doesn't have the grid mixin included, then a grid system will expand to whatever the width of the container is, without maxing out at <code>$grid-max-width</code>. E.g. it could expand to the BODY width.
      tr
        td
          code @mixin grid--gutter
        td.
          Gives right and left padding to all immediate child block elements (i.e. columns).
      tr
        td
          code @mixin grid--nested
        td.
          Gives negative right and left margin to the grid container equal to the gutter width, so that a nested grid is flush right and left inside their containing column.
      tr
        td
          code @mixin col
        td (Min height 1px.)
      tr
        td
          code @mixin flexbox-col--span(X)
        td.
          Column spanning, as calculated out of <code>$grid-max-cols</code> (default is 12).
      tr
        td
          code @mixin flexbox-col--offset(X)
        td
          Offsetting is accomplished by adding to <code>margin-left</code> (while <code>margin-right: auto;</code> , as calculated out of
          <code>$grid-max-cols</code> (default is 12).
          br
          br
          | <b>Note:</b> Only use <code>flexbox-col--offset(X)</code> if you have <i>sufficiently fewer</i> columns in a grid container &ndash; because this offsetting cannot force surplus columns (widths) to wrap on to a new 'row' within the wrapper.
      tr
        td
          code @mixin flexbox-col--order(X)
        td Column (re-)ordering.
      tr
        td
          code @mixin flexbox-col--centered(X)
        td.
          Centering is accomplished by auto margin right and left. Column spanning is as calculated out of <code>$grid-max-cols</code> (default is 12).

  p Float grid mixins are similar. Use them as in the following includes:

  ul
    li
      code @include grid
      | *
    li
      code @include grid--gutter
      | *
    li
      code @include grid--nested
      | *
    li
      code @include col
      | *
    li
      code @include float-col--span(X)
    li
      code @include float-col--offset(X)
    li
      code @include float-col--push(X)
    li
      code @include float-col--pull(X)
    li
      code @include float-col--centered(X)

  p *These are the same mixins as are used with the flexbox column mixins.
